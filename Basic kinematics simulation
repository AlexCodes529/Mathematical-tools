#This is the homepage for my attempt at a 2D physics simulator built entirely in python.
#I want to build this system to mimic several key basic elements of physics, and then maybe 
#expand in later into more complex phenomena.

import tkinter as tk
import itertools as iter 
import math
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
root = tk.Tk()

class SimulationCanvas():
    #Settings for the initial simulation canvas
    def __init__(self, width=300, height=300):
        self.width = width
        self.height = height
        self.canvas = tk.Canvas(root, bg="white", height=self.height, width=self.width)

    def showCanvas(self):
        self.canvas.pack()


#A class to handle all the attributes of an object placed within the simulation
class Object(SimulationCanvas):
    def __init__(self, canvas, objectType, radius=10, xLength = 10, yLength = 10, mass=10, xVelocity=0, yVelocity=0,
                 color="black", outline="black"):
        
        #Setting up the canvas and other graphical charactertistics of the object
        self.canvas = canvas
        self.radius = radius
        self.color = color
        self.outline = outline
        self.xLength = xLength
        self.yLength = yLength

        #General shape of the object and other geometrical properties
        self.objectType = objectType

        #Kinematics components
        self.mass = int(mass) #Sets up initial mass. This determines the maximum height to which the object then rebounds.
        self.gStrength = 0.5 #Sets up the rate of gravitational acceleration.
        self.yVelocity = yVelocity #Initial y velocity so that it can be changed and cause the object to accelerate downwards.
        self.xVelocity = xVelocity #Initialx x velocity do that it can be changed later.
        self.gPotential = None #Placeholder for initial g potential energy.
        self.kEnergy = None #Placeholder for initial kinetic energy.
        self.y = 0 
        self.x = 0
        self.cOR = 0.75 #Coefficient of restitution: %Energy lost = 1- CoR^2.

    #This places the object in its initial position set by the user
    def positionOnScreen(self, centralCoords):
        if self.objectType == "circle":
            self.x = centralCoords[0]
            self.y = centralCoords[1]
            self.gPotential = self.mass*9.81*self.y
            self.circle = self.canvas.create_oval(self.x-self.radius, self.y-self.radius,
                                    self.x+self.radius, self.y+self.radius,
                                    fill=self.color, outline=self.outline)
            
        if self.objectType == "rectangle":
            self.x = centralCoords[0]
            self.y = centralCoords[1]
            self.gPotential = self.mass*9.81*self.y
            self.rectangle = self.canvas.create_rectangle(self.x-self.xLength, self.y-self.yLength, 
                                                       self.x+self.xLength, self.y+self.yLength, 
                                                       fill=self.color, outline=self.outline)
            

    #This handles the movement of each object within the simulation 
    def move(self):
        canvasHeight = int(self.canvas['height'])
        canvasWidth = int(self.canvas['width'])

        # Apply drag force approximation
        self.yVelocity += self.gStrength
        self.y += self.yVelocity
        self.x += self.xVelocity
        self.xVelocity *= 0.999 #Linear friction force acting on the object

        if self.objectType == "circle":
            if self.y + self.radius >= canvasHeight:
                self.y = canvasHeight-self.radius
                self.yVelocity = -self.yVelocity*self.cOR

            if self.y + self.radius <= 0:
                self.y = self.radius
                self.yVelocity = -self.yVelocity*self.cOR

            if abs(self.yVelocity) < 0.001:
                self.yVelocity = 0

            if self.x + self.radius >= canvasWidth:
                self.x = canvasWidth-self.radius
                self.xVelocity = -self.xVelocity*self.cOR

            if self.x - self.radius <= 0:
                self.x = self.radius
                self.xVelocity = -self.xVelocity*self.cOR

            self.canvas.coords(
                self.circle,
                self.x - self.radius, self.y - self.radius,
                self.x + self.radius, self.y + self.radius
            )

        if self.objectType == "rectangle":
            if self.y + self.yLength >= canvasHeight:
                self.y = canvasHeight - self.yLength
                self.yVelocity = -self.yVelocity * self.cOR

            if abs(self.yVelocity) < 0.001:
                self.yVelocity = 0

            if self.x + self.xLength >= canvasWidth:
                self.x = canvasWidth - self.xLength
                self.xVelocity = -self.xVelocity * self.cOR

            if self.x <= 0:
                self.x = 0
                self.xVelocity = -self.xVelocity * self.cOR

            self.canvas.coords(
                self.rectangle,
                self.x, self.y,
                self.x + self.xLength, self.y + self.yLength
            )

def collisionDetection(objects):
        for obj1, obj2 in iter.combinations(objects, 2):
            
            dx = obj1.x - obj2.x
            dy = obj1.y - obj2.y
            distance = math.sqrt(dx**2 + dy**2)

            # Simple bounding-box overlap or radius-based proximity check
            threshold = max(obj1.radius, obj1.xLength, 10) + max(obj2.radius, obj2.xLength, 10)
            if distance < threshold:
                # Cache masses and velocities
                m1, m2 = obj1.mass, obj2.mass
                v1x, v1y = obj1.xVelocity, obj1.yVelocity
                v2x, v2y = obj2.xVelocity, obj2.yVelocity

                # Elastic collision equations (1D, applied separately to x and y)
                obj1.xVelocity = ((m1 - m2) * v1x + 2 * m2 * v2x) / (m1 + m2)
                obj2.xVelocity = ((m2 - m1) * v2x + 2 * m1 * v1x) / (m1 + m2)

                obj1.yVelocity = ((m1 - m2) * v1y + 2 * m2 * v2y) / (m1 + m2)
                obj2.yVelocity = ((m2 - m1) * v2y + 2 * m1 * v1y) / (m1 + m2)

                # Slight position correction to prevent sticking
                overlap = 0.5 * (threshold - distance + 1)
                if distance != 0:  # Avoid division by zero
                    nx = dx / distance
                    ny = dy / distance
                    obj1.x += nx * overlap
                    obj1.y += ny * overlap
                    obj2.x -= nx * overlap
                    obj2.y -= ny * overlap

def drawVelocityVector(object):
    try:
        for tag in [f"velocityVectorOverall_{id(object)}",
                    f"velocityVectorX_{id(object)}", 
                    f"velocityVectorY_{id(object)}", 
                    f"V_{id(object)}", f"X_{id(object)}", f"Y_{id(object)}"]:
            object.canvas.delete(tag)
    except AttributeError:
            pass

    # Compute the vector magnitude
    magnitude = math.sqrt(object.xVelocity**2 + object.yVelocity**2)
    if magnitude == 0:
        return  # No velocity, no arrow

    # Normalize the velocity vector and scale to fixed length
    scale = 50  # Length of the arrow
    dx = (object.xVelocity / magnitude) * scale
    dy = (object.yVelocity / magnitude) * scale

    #Overall velocity vector
    object.canvas.create_line(
        object.x, object.y,
        object.x + dx, object.y + dy,
        arrow=tk.LAST,
        fill="blue",  
        tag=f"velocityVectorOverall_{id(object)}"
    )
    object.canvas.create_text(
        object.x + dx + 10, object.y + dy + 10,
        text="V",
        fill="blue",
        font=("Arial", 10),
        tag=f"V_{id(object)}"
    )

    #X-axis component of the velocity vector
    object.canvas.create_line(
        object.x, object.y,
        object.x + dx, object.y,
        arrow=tk.LAST,
        fill="blue",  
        tag=f"velocityVectorX_{id(object)}"
    )
    object.canvas.create_text(
        object.x + dx + 10, object.y,
        text="X",
        fill="blue",
        font=("Arial", 10),
        tag=f"X_{id(object)}"
    )

    #Y-axis component of the velocity vector 
    object.canvas.create_line(
        object.x, object.y,
        object.x, object.y + dy,
        arrow=tk.LAST,
        fill="blue", 
        tag=f"velocityVectorY_{id(object)}"
    )
    object.canvas.create_text(
        object.x, object.y + dy + 10 ,
        text="Y",
        fill="blue",
        font=("Arial", 10),
        tag=f"Y_{id(object)}"
    )


fig, ax = plt.subplots()
ax.set_title("Kinetic Energy Over Time")
ax.set_xlabel("Time Steps (frames)")
ax.set_ylabel("Kinetic Energy (J)")
plot_canvas = FigureCanvasTkAgg(fig, master=root)
plot_canvas.get_tk_widget().pack(side=tk.BOTTOM, fill=tk.BOTH, expand=True)

timeValues = []
eKHistory = {}
frameCount = 0

def animate(objects):
    global frameCount
    frameCount += 1
    timeValues.append(frameCount)
    if len(timeValues) > 100:
        timeValues.pop(0)

    for obj in objects:
        if id(obj) not in eKHistory:
            eKHistory[id(obj)] = []
        obj.move()
        drawVelocityVector(obj)
        eK = 0.5 * obj.mass * (obj.xVelocity**2 + obj.yVelocity**2)
        eKHistory[id(obj)].append(eK)
        if len(eKHistory[id(obj)]) > 100:
            eKHistory[id(obj)].pop(0)

    collisionDetection(objects)

    ax.clear()
    ax.set_title("Kinetic Energy Over Time")
    ax.set_xlabel("Time Steps (frames)")
    ax.set_ylabel("Kinetic Energy (J)")
    for obj in objects:
        ax.plot(timeValues, eKHistory[id(obj)], label=f"Object {id(obj)}")
    ax.legend()
    plot_canvas.draw()


    root.after(10, lambda: animate(objects))


      
if __name__ == "__main__":
    canvasWrapper = SimulationCanvas(500, 500)
    testObject1 = Object(canvasWrapper.canvas, "circle", radius=10, mass=20, xVelocity=25, yVelocity=-20, color="red", outline="red")
    testObject1.positionOnScreen((50, 150))
    testObject2 = Object(canvasWrapper.canvas, "circle", radius=10, xLength=10, yLength=10, mass=20, xVelocity=5, yVelocity=20, color="black", outline="black")
    testObject2.positionOnScreen((200, 150))
    canvasWrapper.showCanvas()
    animate([testObject1, testObject2])
    root.mainloop()

